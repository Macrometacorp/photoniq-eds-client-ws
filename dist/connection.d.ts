/**
 * Copyright (C) Macrometa, Inc - All Rights Reserved
 *
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Macrometa, Inc <product@macrometa.com>, May 2024
 */
import { QuerySet } from "./query-set";
/**
 * Configure connection
 * @param host host of the connection
 * @param customerId customer id credentails
 * @param apiKey ApiKey credentails
 * @param fabric fabric to be used. Default is `_system`
 * @param pingSeconds seconds to send ping-pong messages for the server. Default is `29`
 */
export type Config = {
    host: string;
    customerId: string;
    apiKey: string;
    fabric?: string;
    pingSeconds?: number;
};
/**
 * List of event types generated by EDS driver
*/
export declare enum EDSEventType {
    Open = "open",
    Close = "close",
    ConnectionId = "connection-id",
    ServerQueryError = "server-query-error",
    ServerGlobalError = "server-global-error",
    ClientQueryError = "client-query-error",
    ClientGlobalError = "client-global-error",
    Message = "message"
}
/**
 * @param type type of event
 * @param connection connection instance which participated in event
 * @param data result of event
 */
export type EDSEvent = {
    type: EDSEventType;
    connection: Connection;
    data: any;
};
/**
 * @param code returns code or the error. Exists only for server responses
 * @param message error message
 * @param query error belongs to query in case if the error is not global
 */
export type EDSEventError = {
    code?: number;
    message: string;
    query?: string;
};
/**
 * @param query query of the event
 * @param count number of message returned by the subscribed query
 * @param retrieve return true if it is an intial data
 */
export type EDSEventMessage = {
    query: string;
    count: number;
    retrieve: boolean;
};
/**
 * The main class manages connection and queries.
 */
export declare class Connection {
    private config;
    private ws;
    private id;
    private queriesToQuerySetsAndCallbacks;
    private pingIntervalId;
    private globalListener;
    private waitingMessages;
    constructor(config: Config, globalListener: (event: EDSEvent) => void);
    /**
     * Connect to web socket
     */
    connect(): void;
    /**
     * Send data directly to web socket
     */
    send(msg: string): void;
    querySet(): QuerySet;
    /**
     * Disconnect from web socket
     */
    disconnect(): void;
    /**
     * Get configuration of the connection
     */
    getConfig(): Config;
    /**
     * Get connection id
     */
    getId(): number | undefined;
    /**
     * Check weather it connected
     */
    isConnected(): boolean;
    private convertInitialData;
    private handleGlobalListener;
    private handleErrorListenerForMap;
    private updatePingInterval;
}
